<div class="container" id="getting-started-body">
  <h1>Getting started</h1>
  <p>If you haven't worked with ruby, take a look at
    <a href="http://www.codecademy.com/tracks/ruby" target="_blank">Codecademy</a> or
    <a href="http://tryruby.org" target="_blank">TryRuby</a>.</p>

  <p>If you need more guidance, we have an <a href="http://awilliams.github.io/articles/rtanque-getting-started/" target="_blank">Alternative Guide</a>, skip the set up steps.</p>

  <h2>Gameplay</h2>

  <p>The goal of TechTanks is to destroy other bots, and survive as long as possible.</p>
  <p>Bots start at random positions, shoot other bots to damage them, collisions damage both bots equally.</p>
  <p>Your score is calculated as percent of total time survived + ending health + percent of bots killed</p>

  <div class="panel-group" role="tablist" aria-multiselectable="true">
    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#bot-syntax">Ruby Syntax</div>
      <pre id="bot-syntax" class="panel-collapse collapse"><code class="ruby"># If statements are defined as follows
if condition
  action
elsif condition-two
  action-two
else
 action-three
end
# Or
action if condition

# While statements have very similar syntax
while condition
 action
end

# Methods are defined with
def method_one(argument-one, argument-two)
 action
end
# Or
def method_two
 action
end
# And are called as
method_one(arg-one, arg-two)
method_two

# For enumerators, iterate with
list.each { |item|
  # Use item to get object at this position
  action(item)
}</code></pre></div>

    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#bot-start">Bot Basics</div>
      <pre id="bot-start" class="panel-collapse collapse"><code class="ruby">class Sample < RTanque::Bot::Brain
  # The tick! method is where you will control your bot
  # This code gets called every tick (or frame)
  def tick!
    # Use self.sensors to get information about your own, or enemy bots
    # We will go over all the information you have access to later
    if self.sensors.ticks == 1
      # Log to the console using puts
      puts 'Running'
    end

    # Enemy information is obtained through the radar
    enemy_reflections = self.sensors.radar


    # Use self.command to control your tank, your bot has three components
    # The body moves your tank, the radar scans for enemies, and the turret shoots
    self.command.fire(5)
  end
end</code></pre></div>

  <div class="panel">
    <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#headings-and-points-start">Headings and Points</div>
    <pre id="headings-and-points-start" class="panel-collapse collapse"><code class="ruby">class Sample < RTanque::Bot::Brain
  def tick!
    # Locations in TechTanks are held in instances of Point
    # Points are created from an (X, Y) pair, and an Arena reference (self.arena)
    new_point = RTanque::Point.new(0, 0, self.arena) # Top left corner

    # Most objects also have Point positions
    my_point = self.sensors.position

    # Points have a few built in helper methods
    my_point.within_radius?(new_point, 10)  # Boolean: Are the points within 10px
    my_point.distance(new_point)            # Float: Distance between points
    my_point.on_wall?      # Boolean: Is the point is near a wall?
    my_point.on_top_wall?  # Boolean: Is it near the top? Same for bottom/left/right


    # Angles and directions in TechTanks are held in Header objects
    new_heading = RTanque::Heading.new(Math::PI)

    # Your tanks body, radar and turret all have headings
    turret_heading = self.sensors.turret_heading

    # We can also create headings between Points
    heading_points = RTanque::Heading.new_between_points(my_point, new_point)
  end
end</code></pre></div>

  <div class="panel">
    <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#movement-start">Movement</div>
    <pre id="movement-start" class="panel-collapse collapse"><code class="ruby">class Sample < RTanque::Bot::Brain
  def tick!
    # Move your tank by changing its speed and heading

    # For example to go forward we can do something like
    self.command.speed = MAX_BOT_SPEED # MAX_BOT_SPEED is a bot constant


    # To turn our tank we set our tanks heading (direction)
    my_point = self.sensors.position
    new_point = RTanque::Point.new(100, 100, self.arena)
    self.command.heading = RTanque::Heading.new_between_points(my_point, new_point)
  end
end</code></pre></div>


  <div class="panel">
    <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#finding-enemies-start">Finding Enemies</div>
    <pre id="finding-enemies-start" class="panel-collapse collapse"><code class="ruby">class Sample < RTanque::Bot::Brain
  def tick!
    # Enemy information is obtained through the radar

    # To set radar direction, set self.command.radar_heading
    self.command.turret_heading = RTanque::Heading.new(Math::PI)

    # To get the radar reflections use self.sensors.radar
    enemies = self.sensors.radar

    # Radar gives us an Enumerator of enemy Reflections, which hold distance (to enemy), heading (to enemy), enemy_health, enemy_heading, enemy_speed, and enemy_name

    # Enumerators can do some cool things, for example to get the closest enemy
    closest_reflection = enemies.min { |a,b| a.distance <=> b.distance }
    # Learn about Enumerators at http://ruby-doc.org/core-2.2.0/Enumerator.html
  end
end</code></pre></div>

  <div class="panel">
  <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#shooting-start">Shooting</div>
  <pre id="shooting-start" class="panel-collapse collapse"><code class="ruby">class Sample < RTanque::Bot::Brain
  def tick!
    # Shoot by turning and firing your turret
    # Your turret has energy that slowly regenerates each tick -
    # the more energy you use the more damage the shot does.
    # You can either shoot faster with low power, or slower with high power.

    # Turn turret by setting self.command.turret_heading
    self.command.turret_heading = target.heading

    # If our turret is within one degree of target
    if self.sensors.turret_heading.delta(target.heading).abs < RTanque::Heading::ONE_DEGREE
      # Fire our turret with maximum power, MAX_FIRE_POWER is a bot constant
      self.command.fire(MAX_FIRE_POWER)
    end
  end
end</code></pre></div>
    <%= render 'docs_sample_tanks' %>
  </div>
  <h2>Publishing Code</h2>
  <p>When your tank is ready to fight, click on <span class="fa fa-2x fa-cloud-upload black-icon"></span> on the right side of your editor and publish your code or to update existing published code. Published code is the version of your tank that will be used when people create a match against your tank. Check your published code in the 'View Published Code' section. Saving will not affect your published code.</p>

  <h2>Running Games</h2>
  <p>Games can be run by pressing the play button in the top right corner, or by clicking on New Match in the 'Matches' page in the sidebar</p>

  <h2>Closing</h2>
  <p>Remember that we have mentors here, feel free to ask them for help any time.</p>
  <p>If you find any bugs, or think of any features that would be cool or useful to have in TechTanks, slack it to Yu Chen Hou and well try to fix/build it.</p>
</div>
