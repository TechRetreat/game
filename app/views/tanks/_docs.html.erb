<div class="container" id="documentation">
  <h1>Getting started</h1>
  <p>If you havent worked with ruby before, you may want to take a look at
    <a href="http://www.codecademy.com/tracks/ruby" target="_blank">Codecademy</a> or
    <a href="http://tryruby.org" target="_blank">TryRuby</a> for a quick start.</p>

  <p>For full RTanque reference you can take a look at
    <a href="http://www.rubydoc.info/github/awilliams/RTanque/master/RTanque" target="_blank">RTanque Documentation</a></p>


  <div class="panel-group" role="tablist" aria-multiselectable="true">


    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#structure-code">Bot Structure</div>
      <pre id="structure-code" class="panel-collapse collapse"><code class="ruby">class Sample < RTanque::Bot::Brain
  # The tick! function gets executed every tick.
  # This is where you read your sensors and control your bot.
  def tick!
    # Use self.sensors to detect things
    health = self.sensors.health

    # and self.command to control tank
    self.command.fire(5)
  end
end</code></pre>
    </div>

    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#sensors-code">Sensors</div>
      <pre id="sensors-code" class="panel-collapse collapse"><code class="ruby"># Sensors contain information about your own and enemy bots

self.sensors.ticks      # Integer: Ticks since the match began

self.sensors.heading    # Heading:  Direction of your Bot
self.sensors.health     # Float:    Health of your Bot
self.sensors.position   # Point:    Location of your Bot
self.sensors.speed      # Float:    Speed of your Bot

self.sensors.gun_energy        # Float:    Energy of your Turret
self.sensors.turret_heading    # Heading:  Direction of your Turret

self.sensors.radar_heading  # Heading:  Direction of your Radar

enemy_bots = self.sensors.radar # Explained in the 'Enemies' section</code></pre>
    </div>


    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#commands-code">Commands</div>
      <pre id="commands-code" class="panel-collapse collapse"><code class="ruby"># Commands tell your bot what to do

self.command.fire_power = power  # Float: Sets Bots fire power
self.command.speed = speed       # Float: Sets Bots speed

self.command.heading = heading         # Heading: Sets Bots heading
self.command.radar_heading = heading   # Heading: Sets Radars heading
self.command.turret_heading = heading  # Heading: Sets Turrets heading

self.command.fire(power) # Float: Shoots with given power (Default: fire_power)</code></pre>
    </div>

    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#enemies-code">Enemies</div>
      <pre id="enemies-code" class="panel-collapse collapse"><code class="ruby"># Enemy information is obtained through the radar
enemy_reflections = self.sensors.radar

# enemy_reflections is an Enumerator (List) of 'Reflections' of all visible tanks

# You can do some cool things with Enumerators, for example to get the closest enemy
closest_reflection = enemies.min { |a,b| a.distance <=> b.distance }

# Learn more about Enumerators at http://ruby-doc.org/core-2.2.0/Enumerator.html

# A Reflection contains some information about an enemy
closest_reflection.distance      # Float: Distance to Enemy
closest_reflection.heading       # Heading: Direction to Enemy
closest_reflection.enemy_health     # Float: Enemy health
closest_reflection.enemy_heading    # Heading: Enemy direction
closest_reflection.enemy_speed      # Float: Enemy speed
closest_reflection.enemy_name       # String: Enemy name

      </code></pre>
    </div>

    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#arena-code">Arena</div>
      <pre id="arena-code" class="panel-collapse collapse"><code class="ruby"># Arena holds the width and height of the stage
self.arena.width   # ..?: Width of arena
self.arena.height   # ..?: Height of arena</code></pre>
    </div>

    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#heading-code">Heading</div>
      <pre id="heading-code" class="panel-collapse collapse"><code class="ruby"># A Heading is basically a wrapper around an angle (in Radians), 0 is up

heading.radians # Float: Radian representation of angle

# Headings can be created from Radians or Degrees, or even between points
heading_radians = RTanque::Heading.new(Math::PI / 2)
heading_degrees = RTanque::Heading.new_from_degrees(180.0)
heading_points = RTanque::Heading.new_between_points(RTanque::Point.new(0,0), RTanque::Point.new(2,3))

# Headings can be added together or with radian values
heading_combined = RTanque::Heading.new(Math::PI) + RTanque::Heading.new(Math::PI)
heading_added = RTanque::Heading.new(Math::PI / 2.0) + Math::PI</code></pre>
    </div>

    <div class="panel">
      <div class="panel-heading" role="tab" data-toggle="collapse" data-target="#point-code">Point</div>
      <pre id="point-code" class="panel-collapse collapse"><code class="ruby"># A Point is an X, Y coordinate, in an Arena

# Points are created from an X, Y pair, and an Arena reference
point = RTanque::Point.new(1, 1, self.arena)

# Points are accessed through x and y values
point.x     # Horizontal position
point.y     # Vertical position

# Points have a few built in helper functions
point.within_radius?(other_point, distance)  # Boolean: Are the points within distance
point.distance(other_point)                  # Float: Distance between points
point.heading(other_point)                   # Heading: Heading to other point

point.on_wall?      # Boolean: Whether the point is near a wall
point.on_top_wall?  # Boolean: Whether the point is near the top wall
# Repeated for on_bottom_wall?, on_right_wall?, and on_left_wall?</code></pre>
    </div>

    <%= render 'docs_sample_tanks' %>
  </div>

  <h1>Published Code</h1>
  <p>The code in the editor is used for testing against the sample tanks while your published code is used for real matches against other users' tanks. This lets you test out little changes while still having a fully working AI to fight against other tanks with.</p>
</div>
